C:\dev\sides\Library-Mnagement-Sequalize\
‚îú‚îÄ‚îÄ src
‚îÇ   ‚îú‚îÄ‚îÄ config
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ config.json
‚îÇ   ‚îú‚îÄ‚îÄ models
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ book.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ author.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ user.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.js
‚îÇ   ‚îú‚îÄ‚îÄ seeders
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ seedBooks.js
‚îÇ   ‚îú‚îÄ‚îÄ controllers
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ bookController.js
‚îÇ   ‚îú‚îÄ‚îÄ routes
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ bookRoutes.js
‚îÇ   ‚îî‚îÄ‚îÄ server.js
‚îú‚îÄ‚îÄ .sequelizerc
‚îú‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ README.md

Here‚Äôs a step-by-step guide to creating and running a seeder in your project, starting from initializing Sequelize to running the seeder script. This guide assumes you‚Äôre using a custom project structure (e.g., src/models, src/seeders, etc.) and PostgreSQL as your database.

Step 1: Initialize Sequelize
Install Sequelize CLI:
If you haven‚Äôt already installed Sequelize CLI, run:


npm install sequelize-cli
Initialize Sequelize:
Run the following command to initialize Sequelize in your project:


npx sequelize-cli init
This will create the following folders and files:

Copy
.
‚îú‚îÄ‚îÄ config
‚îÇ   ‚îî‚îÄ‚îÄ config.json
‚îú‚îÄ‚îÄ migrations
‚îú‚îÄ‚îÄ models
‚îÇ   ‚îî‚îÄ‚îÄ index.js
‚îú‚îÄ‚îÄ seeders
‚îî‚îÄ‚îÄ .sequelizerc
Step 2: Update config/config.json
Open the config/config.json file and update it with your PostgreSQL database credentials. For example:


{
  "development": {
    "username": "postgres",
    "password": "QWEiop5991",
    "database": "library_dev",
    "host": "127.0.0.1",
    "dialect": "postgres"
  },
  "test": {
    "username": "postgres",
    "password": "QWEiop5991",
    "database": "library_test",
    "host": "127.0.0.1",
    "dialect": "postgres"
  },
  "production": {
    "username": "postgres",
    "password": "QWEiop5991",
    "database": "library_prod",
    "host": "127.0.0.1",
    "dialect": "postgres"
  }
}
Ensure your PostgreSQL server is running and the database (library_dev) exists. If it doesn‚Äôt, create it:


createdb library_dev
Step 3: Update .sequelizerc for Custom Structure
If you‚Äôre using a custom project structure (e.g., src/models, src/seeders, etc.), you need to tell Sequelize where to find your models, migrations, and seeders.

Create or update the .sequelizerc file in your project root:


const path = require("path");

module.exports = {
  config: path.resolve("config", "config.json"),
  "models-path": path.resolve("src", "models"),
  "seeders-path": path.resolve("src", "seeders"),
  "migrations-path": path.resolve("src", "migrations"),
};
Move your models, migrations, and seeders to the appropriate folders (src/models, src/migrations, src/seeders).

Step 4: Create the Seeder Script
Install axios:
Install axios to fetch the JSON data from the URL:


npm install axios
Create the Seeder File:
Create a new file in the src/seeders folder, e.g., seedBooks.js.

Add the following code to seedBooks.js:


"use strict";
const axios = require("axios");
const { Book, Author } = require("../models");

module.exports = {
  up: async (queryInterface, Sequelize) => {
    try {
      // Fetch the JSON data from the URL
      const response = await axios.get(
        "https://raw.githubusercontent.com/rapidtechinsights/hr-assignment/refs/heads/main/books.json"
      );
      const booksData = response.data;

      // Loop through the books data and insert into the database
      for (const book of booksData) {
        // Create or find authors
        const authorNames = book.authors.split(", ");
        const authors = await Promise.all(
          authorNames.map((name) =>
            Author.findOrCreate({ where: { name }, defaults: { name } })
          )
        );

        // Create the book
        const createdBook = await Book.create({
          title: book.title,
          isbn: book.isbn,
          publicationYear: book.publication_year,
          image: book.image_url,
          rating: book.average_rating,
          copies: book.books_count,
        });

        // Link the book to its authors
        await createdBook.setAuthors(authors.map((author) => author[0]));
      }

      console.log("Books seeded successfully!");
    } catch (error) {
      console.error("Error seeding books:", error);
    }
  },

  down: async (queryInterface, Sequelize) => {
    // Remove all books and authors (optional, for rollback)
    await Book.destroy({ where: {} });
    await Author.destroy({ where: {} });
    console.log("Books and authors removed.");
  },
};
Step 5: Add a Seeder Script to package.json
Open package.json and add a script to run the seeder:


{
  "scripts": {
    "seed": "npx sequelize-cli db:seed:all"
  }
}
Step 6: Run the Seeder
Run the seeder script:


npm run seed
If everything is set up correctly, you should see the following output:


Sequelize CLI [Node: 20.17.0, CLI: 6.6.2, ORM: 6.37.6]

Loaded configuration file "config/config.json".
Using environment "development".
== 20231010123456-seedBooks: migrating =======
Books seeded successfully!
== 20231010123456-seedBooks: migrated (0.123s)
Step 7: Verify the Data
Use a PostgreSQL client (e.g., psql, pgAdmin, or a GUI tool) to verify that the data has been inserted into the Books and Authors tables.


SELECT * FROM "Books";
SELECT * FROM "Authors";
SELECT * FROM "BookAuthors";
You should see the books and authors from the JSON file in your database.

Step 8: Run the Server
Start your Express server:


npm start
Test the API endpoints (e.g., GET /api/books) to ensure the seeded data is accessible.

Troubleshooting
Database Connection Issues:

Ensure your PostgreSQL server is running.

Verify the database credentials in config/config.json.

Missing Dependencies:

Ensure you have installed sequelize, pg (PostgreSQL driver), and sequelize-cli.


npm install sequelize pg sequelize-cli
Incorrect File Paths:

Double-check the paths in .sequelizerc to ensure they match your project structure.


How to generate any new modesl 

‚úÖ 2Ô∏è‚É£ Generate the Author Model Inside src/models
Now that Sequelize knows where to generate models, run:
npx sequelize-cli model:generate --name Author --attributes name:string
üöÄ This will create:

src/models/author.js ‚úÖ
src/migrations/[timestamp]-create-author.js ‚úÖ


‚úÖ 5Ô∏è‚É£ Run Migrations
Now, create the authors table by running:
npx sequelize-cli db:migrate


‚úÖ How to Ensure the books Table Exists
You must run migrations before seeding.

1Ô∏è‚É£ If you haven‚Äôt created the books model yet, run:
npx sequelize-cli model:generate --name Book --attributes title:string,isbn:string,publicationYear:integer,image:string,rating:float,copies:integer

ensuring an association between table is very important
Your generated Book model is missing the association definition with Author. Since you have a many-to-many relationship between Books and Authors, you need to explicitly define the association in the associate() method.
üîß Fix Your Book Model
Modify Book.associate(models) inside src/models/book.js to define the relationship:

‚úÖ üìÑ src/models/book.js
"use strict";
const { Model } = require("sequelize");

module.exports = (sequelize, DataTypes) => {
  class Book extends Model {
    /**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */
    static associate(models) {
      // Define many-to-many association with Authors
      Book.belongsToMany(models.Author, { through: "BookAuthors", foreignKey: "bookId" });
    }
  }

  Book.init(
    {
      title: DataTypes.STRING,
      isbn: DataTypes.STRING,
      publicationYear: DataTypes.INTEGER,
      image: DataTypes.STRING,
      rating: DataTypes.FLOAT,
      copies: DataTypes.INTEGER,
    },
    {
      sequelize,
      modelName: "Book",
    }
  );

  return Book;
};



üîß Fix Your Author Model
Your Author model must also define the relationship with Book.

‚úÖ üìÑ src/models/author.js

"use strict";
const { Model } = require("sequelize");

module.exports = (sequelize, DataTypes) => {
  class Author extends Model {
    static associate(models) {
      // Define many-to-many association with Books
      Author.belongsToMany(models.Book, { through: "BookAuthors", foreignKey: "authorId" });
    }
  }

  Author.init(
    {
      name: DataTypes.STRING,
    },
    {
      sequelize,
      modelName: "Author",
    }
  );

  return Author;
};


üõ† Step 3: Create a Join Table (BookAuthors)
Your Books and Authors are related via a junction table called "BookAuthors".
Run this command to generate the BookAuthors model:
npx sequelize-cli model:generate --name BookAuthors --attributes bookId:integer,authorId:integer

npx sequelize-cli db:migrate


üìò Books Management
Action	Method	Endpoint	Payload (Example)
Get all books	GET	/api/books?page=1&limit=5	-
Get a book	GET	/api/books/1	-
Add a book	POST	/api/books	{ "title": "New Book", "isbn": "123456789", "publicationYear": 2024, "image": "url.jpg", "rating": 4.5, "copies": 10, "authors": "John Doe" }
Update a book	PUT	/api/books/1	{ "title": "Updated Title" }
Delete a book	DELETE	/api/books/1	-

üìö Borrowing and Returning
Action	Method	Endpoint	Payload (Example)
Borrow a book	POST	/api/books/1/borrow	{ "userId": 1 }
Return a book	POST	/api/books/1/return	{ "userId": 1 }

üìä Reports
Action	Method	Endpoint	Description
Overdue Books	GET	/api/reports/overdue	Lists overdue books with user details


Step 1: Generate the BorrowRecord Model
Run the following command inside your project directory:
npx sequelize-cli model:generate --name BorrowRecord --attributes bookId:integer,userId:integer,borrowedAt:date,returnedAt:date


4Ô∏è‚É£ Recreate Migrations & Seed Again
Since the previous migration likely failed due to the incorrect model association, we need to reset the database and re-run migrations.

Run these commands:

# Reset the database (DANGER: This deletes all data!)
npx sequelize-cli db:drop
npx sequelize-cli db:create

# Run migrations again
npx sequelize-cli db:migrate

# Seed data
npx sequelize-cli db:seed:all


//lets say you need to add a column to an already created table on migratiions  
üîπ Solution: Run a New Migration to Add dueDate
Even though dueDate exists in your model definition, the actual database schema might not have been updated. You need to create a migration to ensure that column is present.

1Ô∏è‚É£ Generate a Migration to Add dueDate Column
Run the following command:
npx sequelize-cli migration:generate --name add-dueDate-to-borrowRecords

‚úÖ This will create a migration file inside src/migrations/.
2Ô∏è‚É£ Edit the Migration File
Inside the generated file (src/migrations/YYYYMMDDHHMMSS-add-dueDate-to-borrowRecords.js), update it like this:

"use strict";

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.addColumn("BorrowRecords", "dueDate", {
      type: Sequelize.DATE,
      allowNull: false,
      defaultValue: Sequelize.literal("CURRENT_TIMESTAMP + INTERVAL '14 days'"), // Default due date 14 days later
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.removeColumn("BorrowRecords", "dueDate");
  },
};


3Ô∏è‚É£ Run the Migration
After updating the migration file, run:
npx sequelize-cli db:migrate



üîπ Next Steps: Implement Users Management
To complete the assignment, you now need to:

1Ô∏è‚É£ Generate the User Model
Run the following command to create the User model:

npx sequelize-cli model:generate --name User --attributes name:string,email:string

This will create:

models/user.js (for defining the User model)
migrations/*-create-user.js (for creating the users table)

2Ô∏è‚É£ Define User Model Associations
Modify models/user.js to include associations:
"use strict";
const { Model } = require("sequelize");

module.exports = (sequelize, DataTypes) => {
  class User extends Model {
    static associate(models) {
      // A User can borrow multiple books (One-to-Many)
      User.hasMany(models.BorrowRecord, { foreignKey: "userId", onDelete: "CASCADE" });
    }
  }

  User.init(
    {
      name: {
        type: DataTypes.STRING,
        allowNull: false,
      },
      email: {
        type: DataTypes.STRING,
        allowNull: false,
        unique: true,
      },
    },
    {
      sequelize,
      modelName: "User",
    }
  );

  return User;
};



3Ô∏è‚É£ Update BorrowRecord Model to Include Users
Since users borrow books, update models/borrowrecord.js:
"use strict";
const { Model } = require("sequelize");

module.exports = (sequelize, DataTypes) => {
  class BorrowRecord extends Model {
    static associate(models) {
      BorrowRecord.belongsTo(models.Book, { foreignKey: "bookId", onDelete: "CASCADE" });
      BorrowRecord.belongsTo(models.User, { foreignKey: "userId", onDelete: "CASCADE" });
    }
  }

  BorrowRecord.init(
    {
      bookId: {
        type: DataTypes.INTEGER,
        allowNull: false,
        references: {
          model: "Books",
          key: "id",
        },
      },
      userId: {
        type: DataTypes.INTEGER,
        allowNull: false,
        references: {
          model: "Users",
          key: "id",
        },
      },
      borrowedAt: {
        type: DataTypes.DATE,
        allowNull: false,
        defaultValue: DataTypes.NOW,
      },
      dueDate: {
        type: DataTypes.DATE,
        allowNull: false,
      },
      returnedAt: {
        type: DataTypes.DATE,
        allowNull: true,
      },
    },
    {
      sequelize,
      modelName: "BorrowRecord",
    }
  );

  return BorrowRecord;
};


5Ô∏è‚É£ Run Migrations
Now, migrate the updated database schema:
npx sequelize-cli db:migrate


6Ô∏è‚É£ Seed Users
Create a new user seeder:
npx sequelize-cli seed:generate --name seedUsers


This will create a new file in seeders/ (e.g., seeders/20250318-seedUsers.js).

Edit the file to add sample users:
"use strict";

module.exports = {
  async up(queryInterface, Sequelize) {
    await queryInterface.bulkInsert("Users", [
      {
        name: "John Doe",
        email: "john.doe@example.com",
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        name: "Jane Smith",
        email: "jane.smith@example.com",
        createdAt: new Date(),
        updatedAt: new Date(),
      },
    ]);
  },

  async down(queryInterface, Sequelize) {
    await queryInterface.bulkDelete("Users", null, {});
  },
};


Run the seeder:
npx sequelize-cli db:seed:all


üîü Test All Endpoints
üìò Users Management

Action	Method	Endpoint	Payload (Example)
Get all users	GET	/api/users	-
Get a user	GET	/api/users/1	-
Add a user	POST	/api/users	{ "name": "Alice", "email": "alice@example.com" }
Update a user	PUT	/api/users/1	{ "name": "Updated Name" }
Delete a user	DELETE	/api/users/1	-


once we borrow a book we can \
üü° Step 4: Manually Override Due Date in Database
Since we cannot directly modify the due date via API, we will manually update the due date in the database.

4Ô∏è‚É£ SQL Query (Run in PostgreSQL)
UPDATE "BorrowRecords" 
SET "dueDate" = '2024-03-01', "borrowedAt" = '2024-02-15' 
WHERE "bookId" = 10 AND "userId" = 1;
